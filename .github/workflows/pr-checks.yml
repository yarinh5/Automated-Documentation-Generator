name: PR Checks

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for merge commits
      uses: actions/github-script@v8
      with:
        script: |
          const { data: commits } = await github.rest.pulls.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const mergeCommits = commits.filter(c => c.parents.length > 1);

          if (mergeCommits.length > 0) {
            core.setFailed('PR contains merge commits. Please rebase instead.');
            return;
          }

          console.log('No merge commits found');

    - name: Check for large files
      uses: actions/github-script@v8
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const largeFiles = files.filter(f => f.changes > 1000);

          if (largeFiles.length > 0) {
            core.setFailed(`Large files detected: ${largeFiles.map(f => f.filename).join(', ')}`);
            return;
          }

          console.log('No large files found');

    - name: Check for sensitive files
      uses: actions/github-script@v8
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const sensitiveFiles = files.filter(f =>
            f.filename.includes('.env') ||
            f.filename.includes('secret') ||
            f.filename.includes('password') ||
            f.filename.includes('key') ||
            f.filename.includes('token')
          );

          if (sensitiveFiles.length > 0) {
            core.setFailed(`Sensitive files detected: ${sensitiveFiles.map(f => f.filename).join(', ')}`);
            return;
          }

          console.log('No sensitive files found');

    - name: Check for binary files
      uses: actions/github-script@v8
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const binaryFiles = files.filter(f =>
            f.filename.endsWith('.exe') ||
            f.filename.endsWith('.dll') ||
            f.filename.endsWith('.so') ||
            f.filename.endsWith('.dylib') ||
            f.filename.endsWith('.bin') ||
            f.filename.endsWith('.zip') ||
            f.filename.endsWith('.tar') ||
            f.filename.endsWith('.gz')
          );

          if (binaryFiles.length > 0) {
            core.setFailed(`Binary files detected: ${binaryFiles.map(f => f.filename).join(', ')}`);
            return;
          }

          console.log('No binary files found');
